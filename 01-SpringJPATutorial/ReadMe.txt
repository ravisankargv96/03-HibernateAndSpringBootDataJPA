Prequisites:
    1. MySQL
    2. DBeaver

Class 3.2:
    Hibernate ORM Mapping
        POJO (Entity)  <====> DB Table
    Queries generated by hibernate get executed using JDBC
        i.e. JDBC -> SQL (DataBase)
            The JDBC will be written in Java Code
        Hibernate -> JDBC -> SQL (DB)
            Hibernate is the implementation built on JPA specification.
            i.e. JPA is an interface & Hibernate is an implementation
        JPA -> Hibernate/OpenJPA (any 3rd party Framework) -> JDBC -> SQL
            Just a specification as to how the Relation and Objects mapping shout take place
        Spring Data JPA -> JPA -> Hibernate -> SQL
            Build on top of JPA and helps building DAO methods using Repository

    As a developer you can connect to any layer,
        1. Spring Data JPA
        2. JPA
        3. Hibernate
        4. JDBC
        5. SQL(DB)

    Hibernate:
        Hibernate is a powerful, high-performance Object-Relational Mapping (ORM) framework that is
        widely used with Java.
        It provides a framework for mapping an object-oriented domain model to a relational database.
        Hibernate is one of the implementations of the Java Persistence API (JPA), which is a standard specification for ORM in Java.

    JPA (Java Persistence API):
        JPA is a specification for ORM in java
        It defines a set of interffaces and anootations for mapping Java objects to database tables and vice versa.
        JPA itself is just a set of guidelines and does not provide any implementation. The implementation of JPA is provided
        by ORM frameworks such as Hibernate, EclipseLink and OpenJPA
        Conclusion:
        JPA Provides a standard for ORM in Java applications, ensuring that developers can switch between different JPA providers
        without changing their code.
        Hibernate is one such JPA Provider.
        Hibernate is a specific implementation of JPA and a powerful ORM framework on its own.
        It offers additional features and optimization beyond the JPA specification, making it a popular choice for ORM in Java applications

============================================================================================================================================================

Week3: Spring Data JPA
Installing MySQL & DBeaver

Windows:
	1. Follow this blog: https://www.geeksforgeeks.org/how-to-install-mysql-in-windows/

Class 3.2: Hibernate and JPA tool

Hibernate ORM Mapping:
	Java Class (POJO)
		Hibernate
	Database (Entity)

	It converts a java object to a DB Entity.

	Eg:
	Java Object:
		Student
			- id: int
			- firstName: String
			- lastName: String
			- email: String
			// getter and setter methods

	Hibernate Frameworks comes here.

	Table
		Student
			- id : INT
			- firstName : VARCHAR
			- lastName : VARCHAR
			- email : VARCHAR

Linking Code to DB level
Spring Data JPA -> JPA -> Hibernate -> JDBC -> DB

	DB:
		Queries generated by hibernate get executed using JDBC

	Hibernate:
		Hibernate is the implementation built on JPA specification

	JPA:
		Just a specification as to how the Relation and Objects mapping shout take place.

	Spring Data JPA:
		Built on top of JPA and helps building DAO methods using Repository

Hibernate:
	Hibernate is a powerful, high-performance ORM framework that is widely used with Java.
	It provides a framework for mapping an object-oriented domain model to a relational database.
	Hibernate is one of the implementations of the Java Persistence API (JPA), which is a standard specification for ORM in Java.

JPA (Java Persistence API):
	JPA is a specification for ORM in Java.
	It defines a set of interfaces and annotations for mapping Java objects to database tables and viceversa.
	JPA itself is just a set of guidelines and does not provide any implementation.
	The implementation of JPA is provided by ORM frameworks such as Hibernate, EclipseLink and OpenJPA.

	So Basically JPA Provides a standard for ORM in Java applications, ensuring that developers can switch between different JPA providers without changing their code.

	And
	Hibernate is one such JPA Provider.
	However,
	Hibernate is a specific implementation of JPA and a powerful ORM framework on its own. It offers additional features and optimizations beyond the JPA specification, making it a popular choice for ORM in Java applications


Common Hibernate Configurations:
	In application.properties (src/main/resources) following configurations needs to be added.
	1. spring.jpa.hibernate.ddl-auto = update/create/validate/create-drop/none
    2. spring.jpa.show-sql = true
    3. spring.jpa.properties.hibernate.format_sql = true
    4. spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect (Optional)

Entity Annotation:
    1. @Entity
    2. @Table
    3. @Id
    4. @GeneratedValue(strategy = GenerationType.IDENTITY)
    5. @Column(name = "name", nullable = false, length = 50)
    6. @CreationTimestamp and @UpdateTimestamp

    @Table Annotation:

    @Table(
        name = "employees",
        catalog = "employee_catalog",
        schema = "hr",
        uniqueConstraints = {
            @UniqueConstraint(columnNames = {"email"})
        },
        indexes = {
            @Index(name = "idx_name", columnList = "name")
            @Index(name = "idx_department", columnList = "department")
        }
    )

Key features of JPA:
    1. Entity Management: Defines how entities are persisted to the database.
    2. Query Language: Provides JPQL (Java Persistence Query Language) for querying entites.
    3. Transactions: Manages transactions, making it easier to handle database operations within a transactional context.
    4. Entity Relationships: Supports defining relationships between entities
        a. One-to-One
        b. One-to-Many
        c. Many-to_One
        d. Many-to-Many

Write how hibernate is interacting with data.sql file?
    Things needs to add in application.properties file
    Refer to the screenshot.

